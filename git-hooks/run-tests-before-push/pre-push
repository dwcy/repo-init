#!/bin/sh
#
# Pre-push hook that runs dotnet test before pushing
# This script detects the platform and runs the appropriate version
#

# Detect if we're on Windows
if [ "$(uname -s)" = "MINGW64_NT"* ] || [ "$(uname -s)" = "CYGWIN_NT"* ] || [ -n "$WINDIR" ]; then
    # Windows - run PowerShell version
    powershell.exe -ExecutionPolicy Bypass -File "$(dirname "$0")/pre-push.ps1"
    exit $?
fi

# Unix/Linux version
# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "${BLUE}Running dotnet test before push...${NC}"

# Check if dotnet is available
if ! command -v dotnet &> /dev/null; then
    echo "${RED}Error: dotnet command not found. Please install .NET SDK.${NC}"
    exit 1
fi

# Find test projects
TEST_PROJECTS=$(find . -name "*.csproj" -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./bin/*" -not -path "./obj/*" | xargs grep -l "Microsoft.NET.Test.Sdk\|xunit\|nunit\|mstest" 2>/dev/null || true)

if [ -z "$TEST_PROJECTS" ]; then
    echo "${YELLOW}Warning: No test projects found. Looking for solution files...${NC}"
    
    # Find solution files and run tests on them
    SOLUTION_FILES=$(find . -name "*.sln" -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./bin/*" -not -path "./obj/*")
    
    if [ -z "$SOLUTION_FILES" ]; then
        echo "${YELLOW}No solution files found. Running dotnet test on all projects...${NC}"
        dotnet test --verbosity quiet --no-build
        if [ $? -ne 0 ]; then
            echo "${RED}Error: Tests failed!${NC}"
            exit 1
        fi
    else
        # Run tests on solution files
        for solution in $SOLUTION_FILES; do
            echo "${BLUE}Running tests for solution: $solution${NC}"
            dotnet test "$solution" --verbosity quiet --no-build
            if [ $? -ne 0 ]; then
                echo "${RED}Error: Tests failed for $solution${NC}"
                exit 1
            fi
        done
    fi
else
    # Run tests on individual test projects
    for project in $TEST_PROJECTS; do
        echo "${BLUE}Running tests for project: $project${NC}"
        dotnet test "$project" --verbosity quiet --no-build
        if [ $? -ne 0 ]; then
            echo "${RED}Error: Tests failed for $project${NC}"
            exit 1
        fi
    done
fi

echo "${GREEN}All tests passed! Proceeding with push...${NC}"
exit 0
